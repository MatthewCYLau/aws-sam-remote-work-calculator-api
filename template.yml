# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  aws-sam-typescript-layers-example

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
      AllowCredentials: false
  Function:
    Layers:
      - !Ref RuntimeDependenciesLayer
    Environment:
      Variables:
        CALCULATIONS_TABLE: !Ref CalculationsTable
        CALCULATION_QUEUE: !Ref CalculationQueue
    Runtime: nodejs16.x
    MemorySize: 128
    Timeout: 100

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  getAllCalculationsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-all-calculations.getAllCalculationsHandler
      Description: Get all calculations from a DynamoDB table
      Policies:
        # Give Create/Read/Update/Delete Permissions to the CalculationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CalculationsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/calculations
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getCalculationByIdFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/get-calculation-by-id.getCalculationByIdHandler
      Description: Get one calculation by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the CalculationsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CalculationsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/calculations/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  sendMessageToSqsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/send-message-sqs.sendMessageToSqsHandler
      Description: Send message to SQS queue
      Policies:
        # Give permission to send message to an Amazon SQS queue. See https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#sqs-send-message-policy
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CalculationQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/v2/calculations
            Method: POST

  healthCheckFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/health-check.healthCheckHandler
      Description: Health check function
      Events:
        Api:
          Type: Api
          Properties:
            Path: /ping
            Method: GET
  calculateSavingsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/calculate-savings.calculateSavingsHandler
      Description: Calculate savings function synchronous
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/v1/calculations
            Method: POST
  # This is a Lambda function config associated with the source code: write-item.ts
  writeItemFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/write-item.writeItemHandler
      Description: A simple example includes an SQS subscription to write queued object to DynamoDB
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Policies:
        # Give Create/Read/Update/Delete Permissions to the CalculationsTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
        - DynamoDBCrudPolicy:
            TableName: !Ref CalculationsTable
      Events:
        # Subscription to primary SQS queue
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CalculationQueue.Arn
            BatchSize: 1
  calculateSavingsAsyncFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: dist/handlers/calculate-savings-async.calculateSavingsAsyncHandler
      Description: Calculate savings function ; write results to DynamoDB
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Policies:
        # Give Create/Read/Update/Delete Permissions to the CalculationsTable, see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#dynamo-db-crud-policy
        - DynamoDBCrudPolicy:
            TableName: !Ref CalculationsTable
      Events:
        # Subscription to primary SQS queue
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CalculationQueue.Arn
            BatchSize: 1

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  CalculationsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  CalculationQueue:
    Type: AWS::SQS::Queue

  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Retain

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
